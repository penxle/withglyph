enum AuthScope {
  STAFF
  USER
}

input BlockMasqueradeInput {
  masqueradeId: ID!
  spaceId: ID!
}

type BookmarkGroup {
  id: ID!
  name: String!
  postCount: Int!
  posts: [Post!]!
  thumbnails: [Image!]!
}

type BookmarkGroupPost {
  bookmarkGroup: BookmarkGroup!
  createdAt: DateTime!
  id: ID!
  post: Post!
}

input BookmarkPostInput {
  postId: ID!
}

type CommentNotification implements IUserNotification {
  actor: Profile
  category: UserNotificationCategory!
  comment: PostComment!
  createdAt: DateTime!
  data: JSON!
  id: ID!
  parentComment: PostComment
  post: Post!
  state: UserNotificationState!
}

enum CommentOrderByKind {
  LATEST
  OLDEST
}

enum ContentFilterAction {
  EXPOSE
  WARN
}

enum ContentFilterCategory {
  ADULT
  CRIME
  CRUELTY
  GAMBLING
  GROSSNESS
  HORROR
  INSULT
  OTHER
  PHOBIA
  TRAUMA
  VIOLENCE
}

input CreateCommentInput {
  content: String!
  parentId: ID
  postId: ID!
  visibility: PostCommentVisibility!
}

input CreatePostInput {
  collectionId: ID
  spaceId: ID
}

input CreatePostReactionInput {
  emoji: String!
  postId: ID!
}

input CreateSpaceCollectionInput {
  name: String!
  spaceId: ID!
}

input CreateSpaceInput {
  iconId: ID
  isPublic: Boolean! = true
  name: String!
  profileAvatarId: ID
  profileName: String
  slug: String!
}

input CreateUserInput {
  isGte14: Boolean!
  marketingConsent: Boolean!
  name: String!
  termsConsent: Boolean!
  token: String!
}

scalar DateTime

input DeleteCommentInput {
  commentId: ID!
}

input DeletePostInput {
  postId: ID!
}

input DeletePostReactionInput {
  emoji: String!
  postId: ID!
}

input DeleteSpaceCollectionInput {
  spaceCollectionId: ID!
}

input DeleteSpaceInput {
  spaceId: ID!
}

input DeleteSpaceProfileInput {
  spaceId: ID!
}

input DeleteUserInput {
  email: String!
}

type Embed {
  description: String
  html: String
  id: ID!
  thumbnailUrl: String
  title: String
  type: String!
  url: String!
}

type FeaturedTag {
  posts: [Post!]!
  tag: Tag!
}

type File {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

input FinalizeFileUploadInput {
  key: String!
  name: String!
}

input FinalizeImageUploadInput {
  bounds: JSON
  key: String!
  name: String!
}

type Flash {
  message: String!
  type: String!
}

input FollowSpaceInput {
  spaceId: ID!
}

input FollowTagInput {
  tagId: ID!
}

input GeneratePostShareImageInput {
  background: String!
  body: String!
  color: String!
  font: String!
  size: String!
  space: String!
  title: String!
}

interface IUserNotification {
  actor: Profile
  category: UserNotificationCategory!
  createdAt: DateTime!
  data: JSON!
  id: ID!
  state: UserNotificationState!
}

type Image {
  color: String!
  height: Int!
  id: ID!
  name: String!
  placeholder: String!
  url: String!
  width: Int!
}

input IssueUserEmailAuthorizationUrlInput {
  code: String!
  email: String!
}

type IssueUserEmailAuthorizationUrlResult {
  url: String!
}

input IssueUserSingleSignOnAuthorizationUrlInput {
  provider: UserSingleSignOnProvider!
  type: UserSingleSignOnAuthorizationType!
}

type IssueUserSingleSignOnAuthorizationUrlResult {
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LikeCommentInput {
  commentId: ID!
}

input LikePostInput {
  postId: ID!
}

input LoginUserInput {
  email: String!
}

input MarkNotificationAsReadInput {
  notificationId: ID!
}

type Mutation {
  blockMasquerade(input: BlockMasqueradeInput!): Space!
  bookmarkPost(input: BookmarkPostInput!): Post!
  createComment(input: CreateCommentInput!): PostComment!
  createPost(input: CreatePostInput!): Post!
  createPostReaction(input: CreatePostReactionInput!): Post!
  createSpace(input: CreateSpaceInput!): Space!
  createSpaceCollection(input: CreateSpaceCollectionInput!): SpaceCollection!
  createUser(input: CreateUserInput!): User!
  deleteComment(input: DeleteCommentInput!): PostComment!
  deletePost(input: DeletePostInput!): Post!
  deletePostReaction(input: DeletePostReactionInput!): Post!
  deleteSpace(input: DeleteSpaceInput!): Space!
  deleteSpaceCollection(input: DeleteSpaceCollectionInput!): SpaceCollection!
  deleteSpaceProfile(input: DeleteSpaceProfileInput!): SpaceMember!
  deleteUser(input: DeleteUserInput!): Void
  disableMonthlyWithdrawal: UserWithdrawalConfig!
  enableMonthlyWithdrawal: UserWithdrawalConfig!
  finalizeFileUpload(input: FinalizeFileUploadInput!): File!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  followSpace(input: FollowSpaceInput!): Space!
  followTag(input: FollowTagInput!): Tag!
  generatePostShareImage(input: GeneratePostShareImageInput!): String!
  instantSettleRevenue: User!
  issueUserEmailAuthorizationUrl(input: IssueUserEmailAuthorizationUrlInput!): IssueUserEmailAuthorizationUrlResult!
  issueUserSingleSignOnAuthorizationUrl(input: IssueUserSingleSignOnAuthorizationUrlInput!): IssueUserSingleSignOnAuthorizationUrlResult!
  likeComment(input: LikeCommentInput!): PostComment!
  likePost(input: LikePostInput!): Post!
  loginUser(input: LoginUserInput!): UserEmailVerification!
  logoutUser: Void
  markNotificationAsRead(input: MarkNotificationAsReadInput!): IUserNotification!
  muteSpace(input: MuteSpaceInput!): Space!
  muteTag(input: MuteTagInput!): Tag!
  pinComment(input: PinCommentInput!): PostComment!
  prepareFileUpload: PrepareFileUploadResult!
  prepareImageUpload: PrepareImageUploadResult!
  publishPost(input: PublishPostInput!): Post!
  purchasePoint(input: PurchasePointInput!): PointPurchase!
  purchasePost(input: PurchasePostInput!): Post!
  setSpaceCollectionPosts(input: SetSpaceCollectionPostsInput!): SpaceCollection!
  synchronizePost(input: SynchronizePostInput!): [SynchronizePostResult!]!
  unblockMasquerade(input: UnblockMasqueradeInput!): Space!
  unbookmarkPost(input: UnbookmarkPostInput!): Post!
  unfollowSpace(input: UnfollowSpaceInput!): Space!
  unfollowTag(input: UnfollowTagInput!): Tag!
  unfurlEmbed(input: UnfurlEmbedInput!): Embed
  unlikeComment(input: UnlikeCommentInput!): PostComment!
  unlikePost(input: UnlikePostInput!): Post!
  unlinkUserSingleSignOn(input: UnlinkUserSingleSignOnInput!): User!
  unlockPasswordedPost(input: UnlockPasswordedPostInput!): Post!
  unmuteSpace(input: UnmuteSpaceInput!): Space!
  unmuteTag(input: UnmuteTagInput!): Tag!
  unpinComment(input: UnpinCommentInput!): PostComment!
  updateComment(input: UpdateCommentInput!): PostComment!
  updatePostOptions(input: UpdatePostOptionsInput!): Post!
  updatePostTags(input: UpdatePostTagsInput!): Post!
  updatePostView(input: UpdatePostViewInput!): Post!
  updateSpace(input: UpdateSpaceInput!): Space!
  updateSpaceCollection(input: UpdateSpaceCollectionInput!): SpaceCollection!
  updateSpaceProfile(input: UpdateSpaceProfileInput!): SpaceMember!
  updateUserContentFilterPreference(input: UpdateUserContentFilterPreferenceInput!): User!
  updateUserEmail(input: UpdateUserEmailInput!): Void
  updateUserMarketingConsent(input: UpdateUserMarketingConsentInput!): User!
  updateUserNotificationPreference(input: UpdateUserNotificationPreferenceInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
  verifyPassportIdentity(input: VerifyPassportIdentityInput!): User!
  verifySettlementIdentity(input: VerifySettlementIdentityInput!): UserSettlementIdentity!
}

input MuteSpaceInput {
  spaceId: ID!
}

input MuteTagInput {
  tagId: ID!
}

enum PaymentMethod {
  BANK_ACCOUNT
  CREDIT_CARD
  GIFTCARD_BOOKNLIFE
  GIFTCARD_CULTURELAND
  GIFTCARD_SMARTCULTURE
  PAYPAL
  PHONE_BILL
  VIRTUAL_BANK_ACCOUNT
}

input PinCommentInput {
  commentId: ID!
}

enum PointKind {
  FREE
  PAID
}

type PointPurchase {
  expiresAt: DateTime!
  id: ID!
  paymentAmount: Int!
  paymentData: JSON!
  paymentMethod: PaymentMethod!
  paymentResult: JSON
  pointAmount: Int!
  state: PointPurchaseState!
}

enum PointPurchaseState {
  COMPLETED
  FAILED
  PENDING
  UNDONE
}

type PointTransaction {
  amount: Int!
  cause: PointTransactionCause!
  createdAt: DateTime!
  id: ID!
  post: Post
}

enum PointTransactionCause {
  EVENT_REWARD
  EXPIRE
  INTERNAL
  PATRONIZE
  PURCHASE
  REFUND
  UNDO_PURCHASE
  UNLOCK_CONTENT
}

type Post {
  ageRating: PostAgeRating!
  blurred: Boolean!
  bookmarkGroups: [BookmarkGroup!]!
  category: PostCategory!
  collection: SpaceCollection
  commentCount(pagination: Boolean! = false): Int!
  commentQualification: PostCommentQualification!
  comments(orderBy: CommentOrderByKind! = OLDEST, page: Int! = 1, take: Int! = 5): [PostComment!]!
  contentUpdates: [PostContentUpdate!]!
  createdAt: DateTime!
  discloseStats: Boolean!
  draftRevision(revisionId: ID): PostRevision!
  externalSearchable: Boolean!
  hasPassword: Boolean!
  id: ID!
  likeCount: Int! @deprecated(reason: "Use `reactionCount` instead")
  liked: Boolean!
  member: SpaceMember
  nextPost: Post
  pairs: [PostPair!]!
  permalink: String!
  previousPost: Post
  protectContent: Boolean!
  publishedAt: DateTime
  publishedRevision: PostRevision
  purchasedAt: DateTime
  purchasedRevision: PostRevision
  reactionCount: Int!
  reactions: [PostReaction!]!
  receiveFeedback: Boolean!
  receivePatronage: Boolean!
  receiveTagContribution: Boolean!
  recommendedPosts: [Post!]!
  revisions: [PostRevision!]!
  shortlink: String!
  space: Space
  state: PostState!
  tags: [PostTag!]!
  thumbnail: Image
  unlocked: Boolean!
  viewCount: Int!
  viewed: Boolean!
  visibility: PostVisibility!
}

enum PostAgeRating {
  ALL
  R15
  R19
}

enum PostCategory {
  FANFICTION
  NONFICTION
  ORIGINAL
  OTHER
}

type PostComment {
  children: [PostComment!]!
  content: String!
  createdAt: DateTime!
  id: ID!
  likeCount: Int!
  liked: Boolean!
  likedByPostUser: Boolean!
  masquerade: SpaceMasquerade
  parent: PostComment
  pinned: Boolean!
  post: Post
  profile: Profile!
  purchased: Boolean!
  state: PostCommentState!
  updatedAt: DateTime
  visibility: PostCommentVisibility!
}

enum PostCommentQualification {
  ANY
  IDENTIFIED
  NONE
}

enum PostCommentState {
  ACTIVE
  INACTIVE
}

enum PostCommentVisibility {
  PRIVATE
  PUBLIC
}

type PostContentUpdate {
  createdAt: DateTime!
  data: String!
  id: ID!
}

enum PostPair {
  BL
  GL
  HL
  MULTIPLE
  NONCP
  OTHER
}

type PostReaction {
  emoji: String!
  id: ID!
  mine: Boolean!
}

type PostRevision {
  characterCount: Int!
  content: JSON!
  createdAt: DateTime!
  id: ID!
  kind: PostRevisionKind!
  paragraphIndent: Int!
  paragraphSpacing: Int!
  previewText: String!
  price: Int
  subtitle: String
  title: String
  updatedAt: DateTime!
}

enum PostRevisionContentKind {
  ARTICLE
  GALLERY
}

enum PostRevisionKind {
  ARCHIVED
  AUTO_SAVE
  MANUAL_SAVE
  PUBLISHED
}

enum PostState {
  DELETED
  DRAFT
  EPHEMERAL
  PUBLISHED
}

enum PostSynchronizationKind {
  AWARENESS
  PING
  SYNCHRONIZE_1
  SYNCHRONIZE_2
  SYNCHRONIZE_3
  UPDATE
}

type PostTag {
  id: ID!
  kind: PostTagKind!
  post: Post!
  tag: Tag!
}

enum PostTagKind {
  CHARACTER
  COUPLING
  EXTRA
  TITLE
  TRIGGER
}

enum PostVisibility {
  PUBLIC
  SPACE
  UNLISTED
}

enum PreferenceType {
  FAVORITE
  MUTE
}

type PrepareFileUploadResult {
  key: String!
  presignedUrl: String!
}

type PrepareImageUploadResult {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type ProvisionedUser {
  avatarUrl: String
  email: String!
  id: ID!
  name: String
}

input PublishPostInput {
  ageRating: PostAgeRating!
  category: PostCategory!
  collectionId: ID
  commentQualification: PostCommentQualification = ANY
  discloseStats: Boolean!
  externalSearchable: Boolean!
  pairs: [PostPair!]! = []
  password: String
  postId: ID!
  protectContent: Boolean!
  receiveFeedback: Boolean!
  receivePatronage: Boolean!
  receiveTagContribution: Boolean!
  spaceId: ID!
  tags: [TagInput!]! = []
  thumbnailId: ID
  visibility: PostVisibility!
}

type PurchaseNotification implements IUserNotification {
  actor: Profile
  category: UserNotificationCategory!
  createdAt: DateTime!
  data: JSON!
  id: ID!
  post: Post!
  state: UserNotificationState!
}

input PurchasePointInput {
  paymentMethod: PaymentMethod!
  pointAgreement: Boolean!
  pointAmount: Int!
}

input PurchasePostInput {
  postId: ID!
  revisionId: ID!
}

type Query {
  auth(scope: AuthScope!): Void
  authLayoutBackgroundImage: Image
  collectionFeed: [SpaceCollection!]!
  curatedPosts: [Post!]!
  draftPost(permalink: String!): Post!
  featuredTagFeed: [FeaturedTag!]!
  flash: Flash
  followingFeed(page: Int! = 1, take: Int! = 30): [Post!]!
  hello(name: String!): String!
  me: User
  pointPurchase(paymentKey: String!): PointPurchase!
  post(permalink: String!): Post!
  provisionedUser(token: String!): ProvisionedUser!
  recentFeed: [Post!]!
  recentlyUsedTags: [Tag!]!
  recommendFeed: [Post!]!
  recommendedTags: [Tag!]!
  revenueWithdrawal(id: String!): RevenueWithdrawal!
  searchPosts(adultFilter: Boolean, excludeTags: [String!]! = [], includeTags: [String!]! = [], orderBy: SearchOrderByKind! = ACCURACY, page: Int! = 1, query: String!, take: Int! = 10): SearchResult!
  searchSpaces(query: String!): [Space!]!
  searchTags(query: String!): [Tag!]!
  space(slug: String!): Space!
  spaceCollection(slug: String!): SpaceCollection!
  spaceFeed: [Post!]!
  tag(name: String!): Tag!
}

type Revenue {
  amount: Int!
  createdAt: DateTime!
  id: ID!
  kind: RevenueKind!
  post: Post
  state: RevenueState!
}

enum RevenueKind {
  POST_PATRONAGE
  POST_PURCHASE
}

enum RevenueState {
  INVOICED
  PAID
  PENDING
}

type RevenueWithdrawal {
  bankAccountNumber: String!
  bankCode: String!
  createdAt: DateTime!
  id: ID!
  kind: RevenueWithdrawalKind!
  paidAmount: Int!
  revenueAmount: Int!
  serviceFeeAmount: Int!
  state: RevenueWithdrawalState!
  taxAmount: Int!
  taxBaseAmount: Int!
  withdrawalFeeAmount: Int!
}

enum RevenueWithdrawalKind {
  INSTANT
  MONTHLY
}

enum RevenueWithdrawalState {
  FAILED
  PENDING
  SUCCESS
}

enum SearchOrderByKind {
  ACCURACY
  LATEST
}

type SearchResult {
  count: Int!
  posts: [Post!]!
}

input SetSpaceCollectionPostsInput {
  postIds: [ID!]!
  spaceCollectionId: ID!
}

type Space {
  blockedMasquerades: [SpaceMasquerade!]!
  collections: [SpaceCollection!]!
  commentProfile: Profile
  createdAt: DateTime!
  description: String
  followed: Boolean!
  followerCount: Int!
  icon: Image!
  id: ID!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  muted: Boolean!
  myMasquerade: SpaceMasquerade
  name: String!
  postCount: Int!
  posts(mine: Boolean! = false): [Post!]!
  slug: String!
  visibility: SpaceVisibility!
}

type SpaceCollection {
  count: Int!
  createdAt: DateTime!
  id: ID!
  name: String!
  posts(order: SpaceCollectionPostOrderByKind! = LATEST): [Post!]!
  space: Space!
  thumbnail: Image
}

type SpaceCollectionPost {
  id: ID!
  order: Int!
  post: Post!
}

enum SpaceCollectionPostOrderByKind {
  LATEST
  OLDEST
}

enum SpaceCollectionState {
  ACTIVE
  INACTIVE
}

type SpaceMasquerade {
  blocked: Boolean!
  blockedAt: DateTime
  id: ID!
  profile: Profile!
}

type SpaceMember {
  createdAt: DateTime!
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
}

enum SpaceMemberInvitationState {
  ACCEPTED
  IGNORED
  PENDING
}

enum SpaceMemberRole {
  ADMIN
  MEMBER
}

enum SpaceMemberState {
  ACTIVE
  INACTIVE
}

enum SpaceState {
  ACTIVE
  INACTIVE
}

enum SpaceVisibility {
  PRIVATE
  PUBLIC
}

type SubscribeNotification implements IUserNotification {
  actor: Profile
  category: UserNotificationCategory!
  createdAt: DateTime!
  data: JSON!
  id: ID!
  space: Space!
  state: UserNotificationState!
}

type Subscription {
  postSynchronization(postId: ID!): SynchronizePostResult!
}

input SynchronizePostInput {
  clientId: String!
  data: String!
  kind: PostSynchronizationKind!
  postId: ID!
}

type SynchronizePostResult {
  data: String!
  kind: PostSynchronizationKind!
  postId: ID!
}

type Tag {
  followed: Boolean!
  followerCount: Int!
  id: ID!
  muted: Boolean!
  name: String!
  postCount: Int!
  posts(page: Int! = 1, take: Int! = 10): [Post!]!
  usageCount: TagUsageCount!
}

input TagInput {
  kind: PostTagKind!
  name: String!
}

type TagUsageCount {
  CHARACTER: Int!
  COUPLING: Int!
  EXTRA: Int!
  TITLE: Int!
  TRIGGER: Int!
}

input UnblockMasqueradeInput {
  masqueradeId: ID!
  spaceId: ID!
}

input UnbookmarkPostInput {
  bookmarkGroupId: ID!
  postId: ID!
}

input UnfollowSpaceInput {
  spaceId: ID!
}

input UnfollowTagInput {
  tagId: ID!
}

input UnfurlEmbedInput {
  url: String!
}

input UnlikeCommentInput {
  commentId: ID!
}

input UnlikePostInput {
  postId: ID!
}

input UnlinkUserSingleSignOnInput {
  provider: UserSingleSignOnProvider!
}

input UnlockPasswordedPostInput {
  password: String!
  postId: ID!
}

input UnmuteSpaceInput {
  spaceId: ID!
}

input UnmuteTagInput {
  tagId: ID!
}

input UnpinCommentInput {
  commentId: ID!
}

input UpdateCommentInput {
  commentId: ID!
  content: String!
}

input UpdatePostOptionsInput {
  discloseStats: Boolean
  postId: ID!
  receiveFeedback: Boolean
  receivePatronage: Boolean
  receiveTagContribution: Boolean
  visibility: PostVisibility
}

input UpdatePostTagsInput {
  category: PostCategory!
  pairs: [PostPair!]!
  postId: ID!
  tags: [TagInput!]!
}

input UpdatePostViewInput {
  postId: ID!
}

input UpdateSpaceCollectionInput {
  name: String!
  spaceCollectionId: ID!
  thumbnailId: ID
}

input UpdateSpaceInput {
  description: String
  iconId: ID
  isPublic: Boolean
  name: String
  slug: String
  spaceId: ID!
}

input UpdateSpaceProfileInput {
  profileAvatarId: ID!
  profileName: String!
  spaceId: ID!
}

input UpdateUserContentFilterPreferenceInput {
  action: ContentFilterAction!
  category: ContentFilterCategory!
}

input UpdateUserEmailInput {
  email: String!
}

input UpdateUserMarketingConsentInput {
  consent: Boolean!
}

input UpdateUserNotificationPreferenceInput {
  category: UserNotificationCategory!
  method: UserNotificationMethod!
  opted: Boolean!
}

input UpdateUserProfileInput {
  avatarId: ID!
  name: String!
}

type User {
  allowedAgeRating: [PostAgeRating!]!
  bookmarkGroups: [BookmarkGroup!]!
  comments(page: Int! = 1, take: Int! = 10): [PostComment!]!
  contentFilterPreferences: [UserContentFilterPreference!]!
  email: String!
  emojiReactedPosts: [Post!]!
  eventEnrollment(eventCode: String!): UserEventEnrollment
  followedSpaces: [Space!]!
  followedTags: [Tag!]!
  id: ID!
  isAdulthood: Boolean!
  marketingConsent: UserMarketingConsent
  mutedSpaces: [Space!]!
  mutedTags: [Tag!]!
  notificationPreferences: [UserNotificationPreference!]!
  notifications(category: UserNotificationCategory, unreadOnly: Boolean! = false): [IUserNotification!]!
  personalIdentity: UserPersonalIdentity
  point(kind: PointKind): Int!
  points(amountFilter: Int! = 0): [PointTransaction!]!
  posts(state: PostState! = PUBLISHED): [Post!]!
  profile: Profile!
  purchasedPosts: [Post!]!
  recentlyViewedPosts: [Post!]!
  revenue(withdrawable: Boolean! = false): Int!
  revenueWithdrawals: [RevenueWithdrawal!]!
  revenues(page: Int! = 1, take: Int! = 10): [Revenue!]!
  settlementIdentity: UserSettlementIdentity
  singleSignOns: [UserSingleSignOn!]!
  spaces: [Space!]!
  state: UserState!
  withdrawalConfig: UserWithdrawalConfig
}

type UserContentFilterPreference {
  action: ContentFilterAction!
  category: ContentFilterCategory!
  id: ID!
}

type UserEmailVerification {
  email: String!
  expiresAt: DateTime!
  id: ID!
  kind: UserEmailVerificationKind!
}

enum UserEmailVerificationKind {
  USER_EMAIL_UPDATE
  USER_LOGIN
}

type UserEventEnrollment {
  createdAt: DateTime!
  eligible: Boolean!
  eventCode: String!
  id: ID!
  rewardedAt: DateTime
}

type UserMarketingConsent {
  createdAt: DateTime!
  id: ID!
}

enum UserNotificationCategory {
  ALL
  COMMENT
  DONATE
  PURCHASE
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TAG_WIKI_EDIT
  TREND
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE
}

type UserNotificationPreference {
  category: UserNotificationCategory!
  id: ID!
  method: UserNotificationMethod!
  opted: Boolean!
}

enum UserNotificationState {
  READ
  UNREAD
}

type UserPersonalIdentity {
  birthday: DateTime!
  createdAt: DateTime!
  id: ID!
  name: String!
}

enum UserPersonalIdentityKind {
  PASSPORT
  PHONE
}

enum UserRole {
  ADMIN
  USER
}

type UserSettlementIdentity {
  bankAccountHolderName: String!
  bankAccountNumber: String!
  bankCode: String!
  id: ID!
}

type UserSingleSignOn {
  email: String!
  id: ID!
  provider: UserSingleSignOnProvider!
}

enum UserSingleSignOnAuthorizationType {
  LINK
  LOGIN
}

enum UserSingleSignOnProvider {
  GOOGLE
  NAVER
  TWITTER
}

enum UserState {
  ACTIVE
  INACTIVE
}

type UserWithdrawalConfig {
  id: ID!
  monthlyWithdrawalDue: DateTime
  monthlyWithdrawalEnabled: Boolean!
}

input VerifyPassportIdentityInput {
  birthday: String!
  expirationDate: String!
  issuedDate: String!
  name: String!
  passportNumber: String!
}

input VerifySettlementIdentityInput {
  bankAccountNumber: String!
  bankCode: String!
  idCardIssuedDate: String!
  residentRegistrationNumberBack: String!
}

"""Represents NULL values"""
scalar Void
